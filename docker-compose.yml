version: "3"
services:
  nginx:
    image: nginx
    restart: always
    container_name: nginx
    volumes:
      - "/etc/letsencrypt:/etc/letsencrypt"
      - "/var/www:/var/www"
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf"
      - "./nginx/conf.d:/etc/nginx/conf.d"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - php
      - mysql
      - redis
      - es7
    networks:
      docker_composer_net:
        ipv4_address: 172.19.0.6
        aliases:
          - nginx
  php:
    image: antonydu/php:7.4-fpm
    restart: always
    expose:
      - 9000
    container_name: php
    volumes:
      - "/var/www:/var/www"
      - "./php/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf"
      - "./php/php-fpm.d/php.ini:/usr/local/etc/php/php.ini"
    networks:
      docker_composer_net:
        ipv4_address: 172.19.0.2
        aliases:
          - php
  mysql:
    image: mysql:8.0
    restart: always
    container_name: mysql
    volumes:
      - "./mysql/data:/var/lib/mysql"
    expose:
      - 3306
    environment:
      MYSQL_ROOT_PASSWORD: "12345abc"
    networks:
      docker_composer_net:
        ipv4_address: 172.19.0.3
        aliases:
          - mysql
  redis:
    image: redis
    restart: always
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      docker_composer_net:
        ipv4_address: 172.19.0.4
        aliases:
          - redis
  es7:
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
    image: elasticsearch:7.6.2
    restart: always
    container_name: es7
    expose:
      - 9200
      - 9300
    networks:
      docker_composer_net:
        ipv4_address: 172.19.0.5
        aliases:
          - es7
  es1:
    build: /var/www/vue-storefront-api/docker/elasticsearch/
    image: es1
    container_name: elasticsearch
    restart: always
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - /var/www/vue-storefront-api/docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      docker_composer_net:
        ipv4_address: 172.19.0.7
        aliases:
          - elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xmx512m -Xms512m"
  kibana:
    build: /var/www/vue-storefront-api/docker/kibana/
    image: kibana
    container_name: kibana
    restart: always
    ports:
      - '5601:5601'
    volumes:
      - /var/www/vue-storefront-api/docker/kibana/config/:/usr/share/kibana/config:ro
    depends_on:
      - es1
    networks:
      docker_composer_net:
        ipv4_address: 172.19.0.8
        aliases:
          - kibana
  vsf_api:
    image: vsf_api
    build:
      context: /var/www/vue-storefront-api/
      dockerfile: /var/www/vue-storefront-api/docker/vue-storefront-api/Dockerfile
    restart: always
    container_name: vsf_api
    depends_on:
      - es1
      - redis
    env_file: /var/www/vue-storefront-api/docker/vue-storefront-api/default.env
    environment:
      VS_ENV: dev
    volumes:
      - '/var/www/vue-storefront-api/config:/var/www/config'
      - '/var/www/vue-storefront-api/ecosystem.json:/var/www/ecosystem.json'
      - '/var/www/vue-storefront-api/migrations:/var/www/migrations'
      - '/var/www/vue-storefront-api/package.json:/var/www/package.json'
      - '/var/www/vue-storefront-api/babel.config.js:/var/www/babel.config.js'
      - '/var/www/vue-storefront-api/tsconfig.json:/var/www/tsconfig.json'
      - '/var/www/vue-storefront-api/nodemon.json:/var/www/nodemon.json'
      - '/var/www/vue-storefront-api/scripts:/var/www/scripts'
      - '/var/www/vue-storefront-api/src:/var/www/src'
      - '/var/www/vue-storefront-api/var:/var/www/var'
    tmpfs:
      - /var/www/dist
    ports:
      - '8080:8080'
    networks:
      docker_composer_net:
        ipv4_address: 172.19.0.9
        aliases:
          - vsf_api
networks:
  docker_composer_net:
    ipam:
      driver: default
      config:
        - subnet: "172.19.0.0/16"
